/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../../zmk-nodefree-config/helper.h"
#include "../../zmk-nodefree-config/international_chars/german.dtsi"
#include "keypos_50keys.h"

&left_encoder { resolution = <2>; };
&right_encoder { resolution = <2>; };

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 RM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 LB5 // right-hand keys
#define THUMBS LH6 LH5 LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4 RH5 RH6

ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // requires PR #1423
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // requires PR #1423
)

#include "combos.dtsi"
#define _LEFT__ &kp LEFT
#define __UP___ &kp UP
#define _DOWN__ &kp DOWN
#define _RIGHT_ &kp RIGHT

#define _SPACE_ &lt HERBST SPACE
#define __TAB__ &kp TAB
#define _ENTER_ &lt NUM RET
#define _BKSPC_ &kp BACKSPACE
#define __DEL__ &kp DEL
#define __ESC__ &lt NAV ESC

#define ___A___ &hml LGUI A
#define ___B___ &kp B
#define ___C___ &kp C
#define ___D___ &kp D
#define ___E___ &hmr LSHFT E
#define ___F___ &kp F
#define ___G___ &kp G
#define ___H___ &kp H
#define ___I___ &hmr RALT I
#define ___J___ &kp J
#define ___K___ &kp K
#define ___L___ &kp L
#define ___M___ &kp M
#define ___N___ &hmr RCTRL N
#define ___O___ &hmr RGUI  O
#define ___P___ &kp P
#define ___Q___ &kp Q
#define ___R___ &hml LALT R
#define ___S___ &hml LSHFT S
#define ___T___ &hml LCTRL T
#define ___U___ &kp U
#define ___V___ &kp V
#define ___W___ &kp W
#define ___X___ &kp X
#define ___Y___ &kp Y
#define ___Z___ &kp Z

#define _COMMA_ &kp COMMA
#define __DOT__ &kp DOT
#define _MINUS_ &kp MINUS
#define _SLASH_ &kp SLASH


#define _SEMI__ &kp SEMI
#define _EQUAL_ &kp EQUAL
#define _BSLH__ &kp BSLH
#define __SQT__ &kp SQT
#define __DEL__ &kp DEL

#define _PARENT &morph_parent
#define _BRACKT &morph_bracket
#define _BRACE_ &morph_brace

#define _LSHFT_ &kp LEFT_SHIFT
#define _LCTRL_ &kp LEFT_CONTROL
#define _LALT__ &kp LEFT_ALT
#define _LCMD__ &kp LEFT_COMMAND
#define _RSHFT_ &kp RIGHT_SHIFT
#define _RCTRL_ &kp RIGHT_CONTROL
#define _RALT__ &kp RIGHT_ALT
#define _RCMD__ &kp RIGHT_COMMAND

#define ___0___ &kp N0
#define ___1___ &kp N1
#define ___2___ &kp N2
#define ___3___ &kp N3
#define ___4___ &kp N4
#define ___5___ &kp N5
#define ___6___ &kp N6
#define ___7___ &kp N7
#define ___8___ &kp N8
#define ___9___ &kp N9

#define _BTCLR_ &bt BT_CLR
#define _BT_00_ &bt BT_SEL 0
#define _BT_01_ &bt BT_SEL 1
#define _BT_02_ &bt BT_SEL 2

#define _______ &trans

#define HE(X) &mt LS(LA(X)) LA(X)
#define LAUNCH_ &kp LA(U)
#define _SHELL_ &kp LA(RET)
#define _QUIT__ &quit
#define LAYOUT_ &kp LA(SPACE)
#define _FLOAT_ &kp LA(F)
#define _LOCK__ &kp LA(P)

#define MOVE_LE HE(LEFT)
#define MOVE_RI HE(RIGHT)
#define MOVE_UP HE(UP)
#define MOVE_DO HE(DOWN)

#define RSIZ_LE &kp LA(LC(LEFT))
#define RSIZ_RI &kp LA(LC(RIGHT))
#define RSIZ_UP &kp LA(LC(UP))
#define RSIZ_DO &kp LA(LC(DOWN))


#define SPLIT_H &kp LA(M)
#define SPLIT_V &kp LA(COMMA)
#define RES_SPL &kp LA(R)

#define DEFAULT 0
#define HERBST  1
#define NUM     2
#define NAV     3

/ {
    behaviors {
        #include "mod_morph.dtsi"
        quit: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(C)>, <&kp LA(LS(C))>;
        };
    };
};
ZMK_LAYER(base,
	_BRACKT ___Q___ ___W___ ___F___ ___P___ ___B___                                              ___J___ ___L___ ___U___ ___Y___ _MINUS_ __SQT__
	_PARENT ___A___ ___R___ ___S___ ___T___ ___G___                                              ___M___ ___N___ ___E___ ___I___ ___O___ _SEMI__
    _BRACE_ ___Z___ ___X___ ___C___ ___D___ ___V___ _LSHFT_ _______  _DOWN__ __UP___ ___K___ ___H___ _COMMA_ __DOT__ _SLASH_ _BSLH__
	                        __DEL__ __TAB__ _ENTER_ _SPACE_ __ESC__  _ENTER_ _SPACE_ _BKSPC_ __TAB__ _EQUAL_
    ,
    &inc_dec_kp C_VOL_DN C_VOL_UP
)

ZMK_LAYER(herbst_layer,
	_BT_00_ HE( F5) HE( F4) HE( F3) HE( F2) HE( F1)                                  _QUIT__ LAUNCH_ MOVE_UP LAYOUT_ _FLOAT_ _LOCK__
	_BT_01_ HE( N5) HE( N4) HE( N3) HE( N2) HE( N1)                                  _SHELL_ MOVE_LE MOVE_DO MOVE_RI RSIZ_LE RSIZ_RI
    _BT_02_ HE(F12) HE(F11) HE(F10) HE(  O) HE(  Y) _______ _______  _______ _______ RES_SPL SPLIT_H SPLIT_V _______ RSIZ_DO RSIZ_UP
                            _______ _______ _______ _______ _______  _______ _______ _______ _______ _______
    ,
    &inc_dec_kp C_VOL_DN C_VOL_UP
)

ZMK_LAYER(num_layer,
	_______ _______ _______ _______ _______ _______                                  _______ ___7___ ___8___ ___9___ _______ _______
	_______ _______ _______ _______ _______ _______                                  _______ ___4___ ___5___ ___6___ _______ _______
    _______ _______ _______ _______ _______ _______ _______ _______  _______ _______ ___0___ ___1___ ___2___ ___3___ _______ _______
	                        _______ _______ _______ _______ _______  _______ _______ _______ _______ _______
    ,
    &inc_dec_kp C_VOL_DN C_VOL_UP
)

ZMK_LAYER(nav_layer,
	_______ _______ _______ _______ _______ _______                                  _______ _______ __UP___ _______ _______ _______
	_______ _______ _______ _______ _______ _______                                  _______ _LEFT__ _DOWN__ _RIGHT_ _______ _______
    _______ _______ _______ _______ _______ _______ _______ _______  _______ _______ _______ _______ _______ _______ _______ _______
	                        _______ _______ _______ _______ _______  _______ _______ _______ _______ _______
    ,
    &inc_dec_kp C_VOL_DN C_VOL_UP
)


// _______ _______ _______ _______ _______ _______                                  _______ _______ _______ _______ _______ _______
// _______ _______ _______ _______ _______ _______                                  _______ _______ _______ _______ _______ _______
// _______ _______ _______ _______ _______ _______ _______ _______  _______ _______ _______ _______ _______ _______ _______ _______
//                         _______ _______ _______ _______ _______  _______ _______ _______ _______ _______
//	&trans &trans &trans &trans &trans &trans                                    &trans &trans &trans &trans &trans &trans
//	&trans &trans &trans &trans &trans &trans                                    &trans &trans &trans &trans &trans &trans
//  &trans &trans &trans &trans &trans &trans &trans &trans            &trans &trans &trans &trans &trans &trans &trans &trans
//                    &trans &trans &trans &trans &trans            &trans &trans &trans &trans &trans
