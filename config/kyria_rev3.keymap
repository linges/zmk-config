/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define HLHOLD(X) &mt LS(LA(X)) LA(X)

#define DEFAULT 0
#define HERBST  1
#define NUM     2
#define NAV     3

&left_encoder { resolution = <2>; };
&right_encoder { resolution = <2>; };


/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        quit: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(C)>, <&kp LA(LS(C))>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
//                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |
			//bindings = <
	//&kp ESC   &kp Q &kp W &kp E &kp R &kp T                                                &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSLH
	//&kp TAB   &kp A &kp S &kp D &kp F &kp G                                                &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
	//&kp LSHFT &kp Z &kp X &kp C &kp V &kp B &kp LSHFT &kp LSHFT        &kp LSHFT &kp LSHFT &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RCTRL
	                 //&kp LGUI &kp DEL &kp RET &kp SPACE &kp ESC        &kp RET  &kp SPACE  &kp TAB &kp BSPC &kp RALT
			//>;

    #define _LEFT__ &kp LEFT
    #define __UP___ &kp UP
    #define _DOWN__ &kp DOWN
    #define _RIGHT_ &kp RIGHT

    #define _SPACE_ &lt HERBST SPACE
    #define __TAB__ &kp TAB
    #define _ENTER_ &lt NUM RET
    #define _BKSPC_ &kp BACKSPACE
    #define __DEL__ &kp DEL
    #define __ESC__ &lt NAV ESC

    #define ___A___ &hm LGUI A
    #define ___B___ &kp B
    #define ___C___ &kp C
    #define ___D___ &kp D
    #define ___E___ &hm LSHFT E
    #define ___F___ &kp F
    #define ___G___ &kp G
    #define ___H___ &kp H
    #define ___I___ &hm RALT I
    #define ___J___ &kp J
    #define ___K___ &kp K
    #define ___L___ &kp L
    #define ___M___ &kp M
    #define ___N___ &hm RCTRL N
    #define ___O___ &hm RGUI  O
    #define ___P___ &kp P
    #define ___Q___ &kp P
    #define ___R___ &hm LALT R
    #define ___S___ &hm LSHFT S
    #define ___T___ &hm LCTRL T
    #define ___U___ &kp U
    #define ___V___ &kp V
    #define ___W___ &kp W
    #define ___X___ &kp X
    #define ___Y___ &kp Y
    #define ___Z___ &kp Z

    #define _COMMA_ &kp COMMA
    #define _MINUS_ &morph_minus_plus
    #define _COLON_ &morph_colon_pipe
    #define _GRAVE_ &morph_grave_equal
    #define __DOT__ &kp DOT
    #define _SLASH_ &kp FSLH
    #define _SQUOT_ &morph_squote_exclamation
    #define _DQUOT_ &morph_dquote_question
    #define _SEMI__ &kp SEMI
    #define _BSLH__ &kp BSLH
    #define __SQT__ &kp SQT
    #define __DEL__ &kp DEL

    #define _LSHFT_ &kp LEFT_SHIFT
    #define _LCTRL_ &kp LEFT_CONTROL
    #define _LALT__ &kp LEFT_ALT
    #define _LCMD__ &kp LEFT_COMMAND
    #define _RSHFT_ &kp RIGHT_SHIFT
    #define _RCTRL_ &kp RIGHT_CONTROL
    #define _RALT__ &kp RIGHT_ALT
    #define _RCMD__ &kp RIGHT_COMMAND

    #define ___0___ &kp N0
    #define ___1___ &kp N1
    #define ___2___ &kp N2
    #define ___3___ &kp N3
    #define ___4___ &kp N4
    #define ___5___ &kp N5
    #define ___6___ &kp N6
    #define ___7___ &kp N7
    #define ___8___ &kp N8
    #define ___9___ &kp N9

    #define _BTCLR_ &bt BT_CLR
    #define _BT_00_ &bt BT_SEL 0
    #define _BT_01_ &bt BT_SEL 1
    #define _BT_02_ &bt BT_SEL 2

    #define _______ &trans


			bindings = <
	__ESC__ ___Q___ ___W___ ___F___ ___P___ ___B___                                              ___J___ ___L___ ___U___ ___Y___ _SEMI__ _BSLH__
	__TAB__ ___A___ ___R___ ___S___ ___T___ ___G___                                              ___M___ ___N___ ___E___ ___I___ ___O___ __SQT__
    _LSHFT_ ___Z___ ___X___ ___C___ ___D___ ___V___ _LSHFT_ _______              _LSHFT_ _LSHFT_ ___K___ ___H___ _COMMA_ __DOT__ _SLASH_ _RCTRL_
	                        _______ __DEL__ _ENTER_ _SPACE_ __ESC__              _ENTER_ _SPACE_ _BKSPC_ __TAB__ _RALT__
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		herbst_layer {
			bindings = <
	&bt BT_SEL 0 HLHOLD(F5) HLHOLD(F4) HLHOLD(F3) HLHOLD(F2) HLHOLD(F1)                                   &quit &kp LA(U) HLHOLD(UP) &kp LA(SPACE) &kp LA(F) &kp LA(P)
	&bt BT_SEL 1 HLHOLD(N5) HLHOLD(N4) HLHOLD(N3) HLHOLD(N2) HLHOLD(N1)                                   &kp LA(RET) HLHOLD(LEFT) HLHOLD(DOWN) HLHOLD(RIGHT) &kp LA(LC(LEFT)) &kp LA(LC(RIGHT))
    &bt BT_SEL 2 HLHOLD(F12) HLHOLD(F11) HLHOLD(F10) HLHOLD(Y) HLHOLD(Y) HLHOLD(O) &trans   &trans &trans &kp LA(R) &kp LA(M) &kp LA(COMMA)  &trans &kp LA(LC(UP)) &kp LA(LC(DOWN))
                       &trans &trans &trans &trans &trans                                &trans &trans &trans &trans &trans
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		num_layer {
			bindings = <
	&trans &trans &trans &trans &trans &trans                                                &trans  &kp N7 &kp N8 &kp N9 &trans &trans
	&trans &trans &trans &trans &trans &trans                                                &trans  &kp N4 &kp N5 &kp N6 &trans &trans
    &trans &trans &trans &trans &trans &trans &trans &trans                        &trans &trans &kp N0 &kp N1 &kp N2 &kp N3 &trans &trans
	                  &trans &trans &trans &trans &trans                        &trans &trans &trans &trans &trans
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};

		nav_layer {
			bindings = <
	&trans &trans &trans &trans &trans &trans                                                &trans  &trans &kp UP &trans &trans &trans
	&trans &trans &trans &trans &trans &trans                                                &trans  &kp LEFT &kp DOWN &kp RIGHT &trans &trans
//  &trans &trans &trans &trans &trans &trans &trans &trans                        &trans &trans &trans &trans &trans &trans &trans &trans
	                  &trans &trans &trans &trans &trans                        &trans &trans &trans &trans &trans
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
		};
	};
};


//	&trans &trans &trans &trans &trans &trans                                                &trans &trans &trans &trans &trans &trans
//	&trans &trans &trans &trans &trans &trans                                                &trans &trans &trans &trans &trans &trans
//  &trans &trans &trans &trans &trans &trans &trans &trans                        &trans &trans &trans &trans &trans &trans &trans &trans
//                    &trans &trans &trans &trans &trans                        &trans &trans &trans &trans &trans
